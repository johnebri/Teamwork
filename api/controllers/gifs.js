const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cloudinary = require('cloudinary').v2;

// set your env variable CLOUDINARY_URL or set the following configuration
cloudinary.config({
  cloud_name: 'dxi6ee9zf',
  api_key: '698928915214427',
  api_secret: 'V1XPw_1Jqw6qR1Qy_ch8NKdxd44'
});

const Pool = require('pg').Pool
const pool = new Pool({
    user: process.env.USER,
    host: process.env.HOST,
    database: process.env.DB,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
})

exports.create_gif = (req, res, next) => {

    cloudinary.uploader.upload(req.file.path, { tags: 'basic_sample' })
    .then(function (image) {
        console.log();
        console.log("** File Upload (Promise)");
        console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
        console.log("* " + image.public_id);
        console.log("* " + image.url);

        // insert into db
        pool.query('INSERT INTO gifs (user_id, title, image_url, created_on) VALUES ($1, $2, $3, now()) RETURNING gif_id', [req.userData.userId, req.body.title, image.url], (error, result) => {
            if(error) {
                throw error;
            }

            return res.status(200).json({
                message: "success",
                data : {
                    gifId : result.rows[0].gif_id,
                    message : "GIF image successfully posted",
                    createdOn : new Date(),
                    title : req.body.title,
                    imageUrl: image.url
                }
            });
        });

      
    })
};

exports.delete_gif = (req, res, next) => {

    const gifId = parseInt(req.params.id);
    // check if gif exists
    pool.query('SELECT * FROM gifs WHERE gif_id = $1', [gifId], (error, result) => {

        if (error) {
            throw error;
        }

        if(result.rows.length > 0) {
            // delete gif

            pool.query('DELETE FROM gifs WHERE gif_id = $1 AND user_id = $2', [gifId, req.userData.userId], (error, result) => {

                if (error) {
                    throw error;
                }

                return res.status(200).json({
                    status : 'success',
                    data : {
                        message : "Gif post successfully deleted"
                    }
                });

            });

        } else {
            // article not found
            return res.status(404).json({
                message : 'Gif post does not exist'
            });
        }

    });
};

exports.comment_on_gif = (req, res, next) => {

    const gifId = req.params.id;
    const { comment } = req.body;

    // check if gif exists
    pool.query('SELECT * FROM gifs WHERE gif_id = $1', [gifId], (error, result) => {

        let gifTitle = "";

        if (error) {
            throw error;
        }

        if(result.rows.length > 0) {

            gifTitle = result.rows[0].title;

            // add article comment

            pool.query('INSERT INTO gif_comments (gif_id, user_id, comment, comment_date) VALUES ($1, $2, $3, now()) RETURNING gif_id, user_id, comment, comment_date', [gifId, req.userData.userId, comment], (error, result) => {
        
                if (error) {
                    throw error;
                }
        
                return res.status(200).json({
                    status: 'success',
                    data : {
                        message : "Comment successfully created",                        
                        createdOn : new Date(),
                        gifTitle : gifTitle,
                        comment : result.rows[0].comment
                    }
                })    
            });        

        } else {
            // article not found
            return res.status(404).json({
                message : 'Gif post does not exist'
            });
        }

    });

};